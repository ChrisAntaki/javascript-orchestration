var junk =
  "";

document.querySelector("#messages").insertAdjacentHTML(
  "beforeend",
  `
  <div>
  10kb.bootloader ${Date.now() - window.performance.timing.navigationStart}
  </div>
  `
);

// Simulate API request.
(async () => {
  // Create global promise.
  const { promise: globalPromise, resolve: globalResolve } =
    Promise.withResolvers();
  window.API_PROMISE = globalPromise;

  // Request API.
  (async () => {
    const url = "./js/api.json?ts=" + Date.now();
    const response = await fetch(url).then((res) => res.json());
    // Simulate delay from server.
    const { promise: delayPromise, resolve: delayResolve } =
      Promise.withResolvers();
    setTimeout(delayResolve, 30);
    await delayPromise;
    console.log(response);
    globalResolve(response);

    // Render latency.
    document.querySelector("#messages").insertAdjacentHTML(
      "beforeend",
      `
<div>
API response ${Date.now() - window.performance.timing.navigationStart}
</div>
`
    );
  })();

  // Load main.
  const el = document.createElement("script");
  el.src = `./js/100kb.main.js`;
  el.async = true;
  document.head.insertAdjacentElement("beforeend", el);
})();
